<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Project extends MX_Controller
{

	private $module = "projectadmin";

	function __construct()
	{
		parent::__construct();
		$this->load->model('user_model');
		$this->load->model('project_model');
		$this->load->model('company_model');
		$this->load->model('role_model');
		$this->load->model('businessunit_model');
		$this->load->model('businessunitmembers_model');
		$this->load->model('issue_model');
		$this->load->model('issuestatus_model');
		$this->load->model('issuetype_model');
		$this->load->model('members_model');
		$this->load->model('membersrole_model');
		$this->load->model('document_model');
		$this->load->model('documentversion_model');
		$this->load->model('approvaldocument_model');
		$this->load->model('approvalreview_model');
		$this->load->model('approvalstep_model');
		$this->load->model('faseproject_model');

		$this->load->library('upload');

		if ($this->session->userdata('role_id') == 1) {
			redirect('systemadmin/dashboard', 'refresh');
		} else if ($this->session->userdata('role_id') == 2) {
			redirect('divisionadmin/admin', 'refresh');
		} else if ($this->session->userdata('role_id') == 4) {
			redirect('member/admin', 'refresh');
		} else if ($this->session->userdata('user_is_login') != TRUE) {
			redirect("login");
		}
	}

	public function index()
	{
		$division = $this->businessunitmembers_model->find_by_user_id($this->session->userdata('user_id'));
		if ($division != false) {
			$a['div'] = $this->businessunit_model->find($division[0]->business_unit_id);
		}

		// $a['data']	= $this->project_model->project_by_division($division[0]->business_unit_id);
		$a['data']	= $this->project_model->get_project_assign_user($this->session->userdata('user_id'));

		$a['page'] = "project_list";
		$a['title'] = "Project";
		$this->load->view('dashboard_system_admin', $a);
	}

	public function detail($project_id)
	{

		$userId = $_SESSION['user_id'];
		$permission = $this->members_model->getPermission($userId, $project_id);
		$a['permission'] = $permission;
		$a['cctvdata'] = $this->mylib->get_cctv_by_project($project_id);

		$division = $this->project_model->get_business_unit_by_project_id($project_id);
		$a['div'] = $this->businessunit_model->find($division->business_unit_id);

		$breadcrumb_sub_1 = array(
			'name' => 'Project',
			'link' => $this->module . '/project',
		);
		$a['breadcrumb_sub_1'] = $breadcrumb_sub_1;
		$breadcrumb_sub_2 = array(
			'name' => 'Project Home',
			'link' => 'projectadmin/project/detail/'.$project_id,
			);

		$a['breadcrumb_sub_2'] = $breadcrumb_sub_2;

		$a['master_status']	= $this->issuestatus_model->get_issue_status();
		$a['master_type'] = $this->issuetype_model->get_issue_type();
		$project = $this->project_model->get_business_unit_by_project_id($project_id);
		$members = $this->businessunitmembers_model->find_by_business_unit_id($project->business_unit_id);
		$a['master_assign'] = $members;
		$a['data']	= $this->project_model->count_project()->result_object();
		$a['project']	= $this->project_model->find($project_id);
		$a['fase']	= $this->faseproject_model->find($project->fase);
		$a['issues'] = $this->issue_model->issue_by_project($project_id);
		$a['members'] = $this->members_model->get_members_by_project_id($project_id);
		$a['document_count_all'] = $this->document_model->count_file_per_project_all($project_id);
		$a['document_count'] = $this->document_model->count_file_per_project($project_id);
		$a['document_count_approved'] = $this->document_model->count_file_per_project_approved($project_id);
		$a['document_count_waiting'] = $this->document_model->count_file_per_project_waiting($project_id);
		$a['project_id'] = $project_id;
		$a['page'] = "project_home";
		$a['title'] = $a['project']->project_name;

		/*
			$this->load->library('googlemaps');
            $config=array();
            $config['center']="37.4419, -122.1419";
            $config['zoom']=17;
            $config['map_height']="400px";
            $config['map_width']="800px";
            $this->googlemaps->initialize($config);
            $marker=array();
            $marker['position']="37.4419, -122.1419";
            $this->googlemaps->add_marker($marker);
			$a['map']=$this->googlemaps->create_map();
			*/

		$json_weather = file_get_contents("http://api.openweathermap.org/data/2.5/weather?lat=" . $a['project']->project_latitude . "&lon=" . $a['project']->project_longitude . "&units=metric&appid=a9602b4dc4142daaef3e55ebe47d4485", false);
		$a['weathers'] = json_decode($json_weather);

		$this->load->view('dashboard_system_admin', $a);
	}

	public function add_members($project_id)
	{
		$a['role']	= $this->membersrole_model->all();
		$a['project_id'] = $project_id;
		$a['project']	= $this->project_model->get_business_unit_by_project_id($project_id);
		$a['businessunitmembers'] = $this->businessunitmembers_model->find_available_members($a['project']->business_unit_id, $project_id);

		$division = $this->project_model->get_business_unit_by_project_id($project_id);
		$a['div'] = $this->businessunit_model->find($division->business_unit_id);
		$breadcrumb_sub_1 = array(
			'name' => $a['div']->business_unit_name,
			'link' => $this->module . '/division',
		);
		$a['breadcrumb_sub_1'] = $breadcrumb_sub_1;

		$breadcrumb_sub_2 = array(
			'name' => $division->project_name,
			'link' => $this->module . '/project/div/' . $a['div']->business_unit_id,
		);
		$a['breadcrumb_sub_2'] = $breadcrumb_sub_2;

		$breadcrumb_sub_3 = array(
			'name' => "Project Home",
			'link' => $this->module . '/project/detail/' . $project_id,
		);
		$a['breadcrumb_sub_3'] = $breadcrumb_sub_3;

		$a['page'] = "member_add";
		$a['title'] = "Add Member";
		$this->load->view('dashboard_system_admin', $a);
	}

	public function delete_members($project_id, $user_id)
	{

		$this->members_model->delete($project_id, $user_id);

		redirect($this->module . '/project/detail/' . $project_id, 'refresh');
	}

	public function insert_members($project_id)
	{
		$uid = $this->input->post('user_id');
		$mrid = $this->input->post('members_role_id');

		//echo $project_id . ' - ' . $uid . ' - ' . $mrid;

		$date1 = str_replace("-", "", date('Y-m-d'));
		$date2 = new DateTime(date('Y/m/d H:i:s'));
		$id = $date1 . $date2->format('U');

		$object = array(
			'members_id' => $id,
			'project_id' => $project_id,
			'user_id' => $uid,
			'members_role_id' => $mrid
		);

		$this->members_model->insert_members($object);

		redirect($this->module . '/project/detail/' . $project_id, 'refresh');
	}

	public function document($project_id, $document_parent_id)
	{

		$userId = $_SESSION['user_id'];
		$permission = $this->members_model->getPermission($userId, $project_id);
		$a['permission'] = $permission;

		$doc = $this->document_model->id($document_parent_id);

		if ($this->session->userdata('user_is_login') != TRUE) {
			redirect("login");
		}

		$division = $this->project_model->get_business_unit_by_project_id($project_id);
		$a['div'] = $this->businessunit_model->find($division->business_unit_id);
		$p = $this->project_model->find($project_id);
		$breadcrumb_sub_1 = array(
			'name' => 'Division',
			'link' => $this->module.'/division',
			);
		$a['breadcrumb_sub_1'] = $breadcrumb_sub_1;

		$breadcrumb_sub_2 = array(
			'name' => 'Division Project',
			'link' => $this->module.'/project/div/'. $a['div']->business_unit_id,
			);
		$a['breadcrumb_sub_2'] = $breadcrumb_sub_2;

		$breadcrumb_sub_3 = array(
			'name' => 'Project Home',
			'link' => $this->module.'/project/detail/'.$project_id,
			);
		$a['breadcrumb_sub_3'] = $breadcrumb_sub_3;
		$breadcrumb_sub_4 = array(
			'name' => 'Document Management',
			'link' => $this->module.'/project/document/'. $project_id.'/0',
			);
		$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
		if($document_parent_id == 0){
			$a['data']	= $this->document_model->basefolder();
 			$a['title'] = $p->project_name;

		} else {
			$a['previous_document_parent_id'] = $doc->document_parent_id;
			$a['data']	= $this->document_model->list_file_per_project($project_id, $document_parent_id);

			$breadcrumb_sub_4 = array(
				'name' => 'Document Management',
				'link' => $this->module.'/project/document/'. $project_id.'/0',
				);
			$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;

			$breadcrumb_sub_5 = array(
				'name' => $p->project_name,
				'link' => $this->module.'/project/document/'. $project_id.'/0',
				);
			$a['breadcrumb_sub_5'] = $breadcrumb_sub_5;

			if($document_parent_id == 1) {
				$a['title'] = 'Work In Progress';
			} else if($document_parent_id == 2) {
				$a['title'] = 'Shared';
			} else if($document_parent_id == 3) {
				$a['title'] = 'Published';
			} else if($document_parent_id == 4){
				$a['title'] = 'Archive';
			} else if($document_parent_id == 5){
				$a['title'] = 'Recycle Bin';
			} else { // jika masuk sub folder maka get nama folder untuk dijadikan title

				$breadcrumb = $this->document_model->get_document_project($project_id, $document_parent_id)->document_name;

				if($doc->document_parent_id == 1) {
					$breadcrumb_sub_6 = array(
						'name' => 'Work In Progress',
						'link' => $this->module.'/project/document/'.$project_id.'/1',
						);
					$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;

					$a['title'] = $breadcrumb;
				}else if($doc->document_parent_id == 2) {
					$breadcrumb_sub_6 = array(
						'name' => 'Shared',
						'link' => $this->module.'/project/document/'.$project_id.'/2',
						);
					$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;

					$a['title'] = $breadcrumb;
				}else if($doc->document_parent_id == 3) {
					$breadcrumb_sub_6 = array(
						'name' => 'Published',
						'link' => $this->module.'/project/document/'.$project_id.'/3',
						);
					$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;

					$a['title'] = $breadcrumb;
				}else if($doc->document_parent_id == 4) {
					$breadcrumb_sub_6 = array(
						'name' => 'Archive',
						'link' => $this->module.'/project/document/'.$project_id.'/4',
						);
					$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;

					$a['title'] = $breadcrumb;
				} else {

					$parent = null;
					$subParent = null;
					$subsubParent = null;
					$subsubsubParent = null;
					$subsubsubsubParent = null;
					$subsubsubsubsubParent = null;
					$subsubsubsubsubsubParent = null;

					$parent = $this->document_model->id($doc->document_parent_id);
					if($parent) {
						$subParent = $this->document_model->id($parent->document_parent_id);
					}
					if($subParent) {
						$subsubParent = $this->document_model->id($subParent->document_parent_id);
					}
					if($subsubParent) {
						$subsubsubParent = $this->document_model->id($subsubParent->document_parent_id);
					}
					if($subsubsubParent) {
						$subsubsubsubParent = $this->document_model->id($subsubsubParent->document_parent_id);
					}
					if($subsubsubsubParent) {
						$subsubsubsubsubParent = $this->document_model->id($subsubsubsubParent->document_parent_id);
					}
					if($subsubsubsubsubParent) {
						$subsubsubsubsubsubParent = $this->document_model->id($subsubsubsubsubParent->document_parent_id);
					}

					$doc = $this->document_model->id($document_parent_id);

					if($subsubsubsubsubsubParent) {
						$breadcrumb_sub_6 = array(
							'name' => $subsubsubsubsubsubParent->document_name,
							'link' => $this->module.'/project/document/'.$project_id.'/'.$subsubsubsubsubsubParent->document_id,
							);
						$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;
					}

					if($subsubsubsubsubParent) {
						$breadcrumb_sub_6 = array(
							'name' => $subsubsubsubsubParent->document_name,
							'link' => $this->module.'/project/document/'.$project_id.'/'.$subsubsubsubsubParent->document_id,
							);
						$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;
					}

					if($subsubsubsubParent) {
						$breadcrumb_sub_7 = array(
							'name' => $subsubsubsubParent->document_name,
							'link' => $this->module.'/project/document/'.$project_id.'/'.$subsubsubsubParent->document_id,
							);
						$a['breadcrumb_sub_7'] = $breadcrumb_sub_7;
					}

					if($subsubsubParent) {
						$breadcrumb_sub_8 = array(
							'name' => $subsubsubParent->document_name,
							'link' => $this->module.'/project/document/'.$project_id.'/'.$subsubsubParent->document_id,
							);
						$a['breadcrumb_sub_8'] = $breadcrumb_sub_8;
					}

					if($subsubParent) {
						$breadcrumb_sub_9 = array(
							'name' => $subsubParent->document_name,
							'link' => $this->module.'/project/document/'.$project_id.'/'.$subsubParent->document_id,
							);
						$a['breadcrumb_sub_9'] = $breadcrumb_sub_9;
					}

					if($subParent) {
						$breadcrumb_sub_10 = array(
							'name' => $subParent->document_name,
							'link' => $this->module.'/project/document/'.$project_id.'/'.$subParent->document_id,
							);
						$a['breadcrumb_sub_10'] = $breadcrumb_sub_10;
					}

					if($parent) {
						$breadcrumb_sub_11 = array(
							'name' => $parent->document_name,
							'link' => $this->module.'/project/document/'.$project_id.'/'.$parent->document_id,
							);
						$a['breadcrumb_sub_11'] = $breadcrumb_sub_11;
					}

					$a['title'] = $doc->document_name;
				}
			}
		} 

		$a['user_member'] = $this->members_model->find_member_by_project($this->session->userdata('user_id'), $project_id);
		$a['project_id'] = $project_id;
		$a['document_parent_id'] = $document_parent_id;
		$a['page'] = "document_management";
	
		$this->load->view('dashboard_system_admin', $a);
	}

	public function document_create_folder($project_id, $document_parent_id)
	{
		$name = $this->input->post('folder_name');

		$date1 = str_replace("-", "", date('Y-m-d'));
		$date2 = new DateTime(date('Y/m/d H:i:s'));
		$id = $date1 . $date2->format('U');

		$object = array(
			'document_id' => $id,
			'project_id' => $project_id,
			'document_type_id' => 0,
			'document_name' => $name,
			'document_upload_date' => date('Y-m-d'),
			'document_upload_time' => date('H:i:s'),
			'document_parent_id' => $document_parent_id
		);

		$this->document_model->insert($object);

		redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}

	public function viewer($document_id, $document_version_code = 0)
	{
		$a['data']	= $this->document_model->id_by_version_code($document_id, $document_version_code);
		$this->load->view('viewer3d', $a);
	}

	public function document_view($project_id, $document_parent_id, $document_id, $document_version_code)
	{
		$a['data']	= $this->document_model->id_by_version_code($document_id, $document_version_code);
		$filename = $a['data']->document_file_version;

		$a['isPDF'] = true;
		if ($document_version_code == 0 || strpos($filename, ".pdf") == false) {
			$a['isPDF'] = false;
		}

		$a['version'] = $this->document_model->document_version($document_id);
		$a['approval_status'] = $this->approvaldocument_model->approval_status_by_document_id($document_id, $document_version_code);
		$a['review_status'] = $this->approvalreview_model->find_by_document_id_and_user_id($document_id, $document_version_code, $this->session->userdata('user_id'));
		$a['user_member'] = $this->members_model->find_member_by_project($this->session->userdata('user_id'), $project_id);

		$doc = $this->document_model->id($document_id);
		// breadcrumb
		$breadcrumb_sub_1 = array(
			'name' => 'Project',
			'link' => $this->module . '/project',
		);
		$a['breadcrumb_sub_1'] = $breadcrumb_sub_1;

		$breadcrumb_sub_2 = array(
			'name' => 'Project Home',
			'link' => $this->module . '/project/detail/' . $project_id,
		);
		$a['breadcrumb_sub_2'] = $breadcrumb_sub_2;


		if ($document_parent_id == 0) {
			$a['title'] = "Document Management";
		} else {
			$a['previous_document_parent_id'] = $this->document_model->id($document_parent_id)->document_parent_id;

			$breadcrumb_sub_3 = array(
				'name' => 'Document Management',
				'link' => $this->module . '/project/document/' . $project_id . '/0',
			);
			$a['breadcrumb_sub_3'] = $breadcrumb_sub_3;

			if ($doc->document_parent_id == 1) {
				$breadcrumb_sub_4 = array(
					'name' => 'Work In Progress',
					'link' => $this->module . '/project/document/' . $project_id . '/1',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				$a['title'] = $a['data']->document_name_code;
			} else if ($doc->document_parent_id == 2) {
				$breadcrumb_sub_4 = array(
					'name' => 'Shared',
					'link' => $this->module . '/project/document/' . $project_id . '/2',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				$a['title'] = $a['data']->document_name_code;
			} else if ($doc->document_parent_id == 3) {
				$breadcrumb_sub_4 = array(
					'name' => 'Published',
					'link' => $this->module . '/project/document/' . $project_id . '/3',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				$a['title'] = $a['data']->document_name_code;
			} else if ($doc->document_parent_id == 4) {
				$breadcrumb_sub_4 = array(
					'name' => 'Archive',
					'link' => $this->module . '/project/document/' . $project_id . '/4',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				$a['title'] = $a['data']->document_name_code;
			} else { // jika masuk sub folder maka get nama folder untuk dijadikan title
				// $breadcrumb = $this->document_model->get_document_project($project_id, $doc->document_parent_id);
				$breadcrumb = $doc->document_name;

				if ($doc->document_parent_id == 1) {
					$breadcrumb_sub_4 = array(
						'name' => 'Work In Progress',
						'link' => $this->module . '/project/document/' . $project_id . '/1',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else if ($doc->document_parent_id == 2) {
					$breadcrumb_sub_4 = array(
						'name' => 'Shared',
						'link' => $this->module . '/project/document/' . $project_id . '/2',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else if ($doc->document_parent_id == 3) {
					$breadcrumb_sub_4 = array(
						'name' => 'Published',
						'link' => $this->module . '/project/document/' . $project_id . '/3',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else if ($doc->document_parent_id == 4) {
					$breadcrumb_sub_4 = array(
						'name' => 'Archive',
						'link' => $this->module . '/project/document/' . $project_id . '/4',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else {

					$parent = null;
					$subParent = null;
					$subsubParent = null;
					$subsubsubParent = null;
					$subsubsubsubParent = null;
					$subsubsubsubsubParent = null;
					$subsubsubsubsubsubParent = null;

					$parent = $this->document_model->id($doc->document_parent_id);
					if ($parent) {
						$subParent = $this->document_model->id($parent->document_parent_id);
					}
					if ($subParent) {
						$subsubParent = $this->document_model->id($subParent->document_parent_id);
					}
					if ($subsubParent) {
						$subsubsubParent = $this->document_model->id($subsubParent->document_parent_id);
					}
					if ($subsubsubParent) {
						$subsubsubsubParent = $this->document_model->id($subsubsubParent->document_parent_id);
					}
					if ($subsubsubsubParent) {
						$subsubsubsubsubParent = $this->document_model->id($subsubsubsubParent->document_parent_id);
					}
					if ($subsubsubsubsubParent) {
						$subsubsubsubsubsubParent = $this->document_model->id($subsubsubsubsubParent->document_parent_id);
					}

					$doc = $this->document_model->id($document_parent_id);

					if ($subsubsubsubsubsubParent) {
						$breadcrumb_sub_4 = array(
							'name' => $subsubsubsubsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubsubsubsubParent->document_id,
						);
						$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
					}

					if ($subsubsubsubsubParent) {
						$breadcrumb_sub_5 = array(
							'name' => $subsubsubsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubsubsubParent->document_id,
						);
						$a['breadcrumb_sub_5'] = $breadcrumb_sub_5;
					}

					if ($subsubsubsubParent) {
						$breadcrumb_sub_6 = array(
							'name' => $subsubsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubsubParent->document_id,
						);
						$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;
					}

					if ($subsubsubParent) {
						$breadcrumb_sub_7 = array(
							'name' => $subsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubParent->document_id,
						);
						$a['breadcrumb_sub_7'] = $breadcrumb_sub_7;
					}

					if ($subsubParent) {
						$breadcrumb_sub_8 = array(
							'name' => $subsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubParent->document_id,
						);
						$a['breadcrumb_sub_8'] = $breadcrumb_sub_8;
					}

					if ($subParent) {
						$breadcrumb_sub_9 = array(
							'name' => $subParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subParent->document_id,
						);
						$a['breadcrumb_sub_9'] = $breadcrumb_sub_9;
					}

					if ($parent) {
						$breadcrumb_sub_10 = array(
							'name' => $parent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $parent->document_id,
						);
						$a['breadcrumb_sub_10'] = $breadcrumb_sub_10;
					}

					$a['title'] = $a['data']->document_name_code;
				}
			}
		}
		// end breadcrumb

		$a['project_id'] = $project_id;
		$a['document_parent_id'] = $document_parent_id;
		$a['page'] = "document_view";
		$this->load->view('dashboard_system_admin', $a);
	}

	public function document_edit($project_id, $document_parent_id, $document_id, $document_version_code)
	{
		$a['data']	= $this->document_model->id_by_version_code($document_id, $document_version_code);

		$doc = $this->document_model->id($document_id);
		// breadcrumb
		$breadcrumb_sub_1 = array(
			'name' => 'Project',
			'link' => $this->module . '/project',
		);
		$a['breadcrumb_sub_1'] = $breadcrumb_sub_1;

		$breadcrumb_sub_2 = array(
			'name' => 'Project Home',
			'link' => $this->module . '/project/detail/' . $project_id,
		);
		$a['breadcrumb_sub_2'] = $breadcrumb_sub_2;


		if ($document_parent_id == 0) {
			$a['title'] = 'Edit';
		} else {
			$a['previous_document_parent_id'] = $this->document_model->id($document_parent_id)->document_parent_id;

			$breadcrumb_sub_3 = array(
				'name' => 'Document Management',
				'link' => $this->module . '/project/document/' . $project_id . '/0',
			);
			$a['breadcrumb_sub_3'] = $breadcrumb_sub_3;

			if ($doc->document_parent_id == 1) {
				$breadcrumb_sub_4 = array(
					'name' => 'Work In Progress',
					'link' => $this->module . '/project/document/' . $project_id . '/1',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;

				$breadcrumb_sub_5 = array(
					'name' => $a['data']->document_name_code,
					'link' => $this->module . '/project/document_view/' . $project_id . '/' . $document_parent_id . '/' . $document_id . '/' . $document_version_code,
				);
				$a['breadcrumb_sub_5'] = $breadcrumb_sub_5;
			} else if ($doc->document_parent_id == 2) {
				$breadcrumb_sub_4 = array(
					'name' => 'Shared',
					'link' => $this->module . '/project/document/' . $project_id . '/2',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;

				$breadcrumb_sub_5 = array(
					'name' => $a['data']->document_name_code,
					'link' => $this->module . '/project/document_view/' . $project_id . '/' . $document_parent_id . '/' . $document_id . '/' . $document_version_code,
				);
				$a['breadcrumb_sub_5'] = $breadcrumb_sub_5;
			} else if ($doc->document_parent_id == 3) {
				$breadcrumb_sub_4 = array(
					'name' => 'Published',
					'link' => $this->module . '/project/document/' . $project_id . '/3',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;

				$breadcrumb_sub_5 = array(
					'name' => $a['data']->document_name_code,
					'link' => $this->module . '/project/document_view/' . $project_id . '/' . $document_parent_id . '/' . $document_id . '/' . $document_version_code,
				);
				$a['breadcrumb_sub_5'] = $breadcrumb_sub_5;
			} else if ($doc->document_parent_id == 4) {
				$breadcrumb_sub_4 = array(
					'name' => 'Archive',
					'link' => $this->module . '/project/document/' . $project_id . '/4',
				);
				$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;

				$breadcrumb_sub_5 = array(
					'name' => $a['data']->document_name_code,
					'link' => $this->module . '/project/document_view/' . $project_id . '/' . $document_parent_id . '/' . $document_id . '/' . $document_version_code,
				);
				$a['breadcrumb_sub_5'] = $breadcrumb_sub_5;
			} else { // jika masuk sub folder maka get nama folder untuk dijadikan title
				// $breadcrumb = $this->document_model->get_document_project($project_id, $doc->document_parent_id);
				$breadcrumb = $doc->document_name;

				if ($doc->document_parent_id == 1) {
					$breadcrumb_sub_4 = array(
						'name' => 'Work In Progress',
						'link' => $this->module . '/project/document/' . $project_id . '/1',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else if ($doc->document_parent_id == 2) {
					$breadcrumb_sub_4 = array(
						'name' => 'Shared',
						'link' => $this->module . '/project/document/' . $project_id . '/2',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else if ($doc->document_parent_id == 3) {
					$breadcrumb_sub_4 = array(
						'name' => 'Published',
						'link' => $this->module . '/project/document/' . $project_id . '/3',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else if ($doc->document_parent_id == 4) {
					$breadcrumb_sub_4 = array(
						'name' => 'Archive',
						'link' => $this->module . '/project/document/' . $project_id . '/4',
					);
					$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
				} else {

					$parent = null;
					$subParent = null;
					$subsubParent = null;
					$subsubsubParent = null;
					$subsubsubsubParent = null;
					$subsubsubsubsubParent = null;
					$subsubsubsubsubsubParent = null;

					$parent = $this->document_model->id($doc->document_parent_id);
					if ($parent) {
						$subParent = $this->document_model->id($parent->document_parent_id);
					}
					if ($subParent) {
						$subsubParent = $this->document_model->id($subParent->document_parent_id);
					}
					if ($subsubParent) {
						$subsubsubParent = $this->document_model->id($subsubParent->document_parent_id);
					}
					if ($subsubsubParent) {
						$subsubsubsubParent = $this->document_model->id($subsubsubParent->document_parent_id);
					}
					if ($subsubsubsubParent) {
						$subsubsubsubsubParent = $this->document_model->id($subsubsubsubParent->document_parent_id);
					}
					if ($subsubsubsubsubParent) {
						$subsubsubsubsubsubParent = $this->document_model->id($subsubsubsubsubParent->document_parent_id);
					}

					$doc = $this->document_model->id($document_parent_id);

					if ($subsubsubsubsubsubParent) {
						$breadcrumb_sub_4 = array(
							'name' => $subsubsubsubsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubsubsubsubParent->document_id,
						);
						$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
					}

					if ($subsubsubsubsubParent) {
						$breadcrumb_sub_5 = array(
							'name' => $subsubsubsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubsubsubParent->document_id,
						);
						$a['breadcrumb_sub_5'] = $breadcrumb_sub_5;
					}

					if ($subsubsubsubParent) {
						$breadcrumb_sub_6 = array(
							'name' => $subsubsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubsubParent->document_id,
						);
						$a['breadcrumb_sub_6'] = $breadcrumb_sub_6;
					}

					if ($subsubsubParent) {
						$breadcrumb_sub_7 = array(
							'name' => $subsubsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubsubParent->document_id,
						);
						$a['breadcrumb_sub_7'] = $breadcrumb_sub_7;
					}

					if ($subsubParent) {
						$breadcrumb_sub_8 = array(
							'name' => $subsubParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subsubParent->document_id,
						);
						$a['breadcrumb_sub_8'] = $breadcrumb_sub_8;
					}

					if ($subParent) {
						$breadcrumb_sub_9 = array(
							'name' => $subParent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $subParent->document_id,
						);
						$a['breadcrumb_sub_9'] = $breadcrumb_sub_9;
					}

					if ($parent) {
						$breadcrumb_sub_10 = array(
							'name' => $parent->document_name,
							'link' => $this->module . '/project/document/' . $project_id . '/' . $parent->document_id,
						);
						$a['breadcrumb_sub_10'] = $breadcrumb_sub_10;
					}
				}
			}
		}
		// end breadcrumb

		$a['project_id'] = $project_id;
		$a['document_parent_id'] = $document_parent_id;
		$a['page'] = "document_editor2";
		$a['title'] = "Edit";
		$this->load->view('dashboard_system_admin', $a);
	}

	public function document_upload_file_bulkx($project_id, $document_parent_id)
	{
		$strInputFileName = "file";
		$arrFiles = $_FILES;

		$config['upload_path'] = "./uploads/documents/";
		$config['allowed_types'] = "pdf|doc|docx|xls|xlsx|csv|png|jpg|jpeg|gif|txt";
		$config['overwrite'] 	 = FALSE;

		// echo json_encode($this->input->get_post('title_file', TRUE));
		// $file_info = $this->upload->data();
		// echo json_encode($_FILES["file"]);
		// die();

		$countFiles = count($_FILES[$strInputFileName]['name']);
		for ($i = 0; $i < $countFiles; $i++) {
			$date1 = str_replace("-", "", date('Y-m-d'));
			$date2 = new DateTime(date('Y/m/d H:i:s', (time())));
			$id = $date1 . $date2->format('U');
			$new_name = "";

			$file = $arrFiles[$strInputFileName]['name'][$i];
			if (preg_match('/\s/', $file)) {
				$new_name = preg_replace('/\s+/', '_', $file);
			} else {
				$new_name = $file;
			}
			$info 	  = pathinfo($new_name);
			$new_name = preg_replace('/[^\w]/', '_', $info["filename"]);
			$new_name =  $new_name . "." . $info['extension'];
			// $new_name = $id . "_" . $new_name . "." . $info['extension'];
			//overwrite _FILES array
			$_FILES[$strInputFileName]['name'] = $new_name;
			$_FILES[$strInputFileName]['type'] = $arrFiles[$strInputFileName]['type'][$i];
			$_FILES[$strInputFileName]['tmp_name'] = $arrFiles[$strInputFileName]['tmp_name'][$i];
			$_FILES[$strInputFileName]['error'] = $arrFiles[$strInputFileName]['error'][$i];
			$_FILES[$strInputFileName]['size'] = $arrFiles[$strInputFileName]['size'][$i];

			$config['file_name'] = $new_name;

			$this->upload->initialize($config);

			$object = array(
				'document_id' => $id . $i,
				'project_id' => $project_id,
				'document_type_id' => 1,
				'document_name' => null,
				'document_name_code' => $this->input->get_post('title_file', TRUE)[$i],
				'document_file' => $new_name,
				'document_size' => $arrFiles[$strInputFileName]['size'][$i],
				'document_upload_date' => date('Y-m-d'),
				'document_upload_time' => date('H:i:s'),
				'document_parent_id' => $document_parent_id
			);

			$this->document_model->insert($object);

			// insert document version
			$version = array(
				'document_version_id' => $id . $i,
				'document_id' => $id . $i,
				'document_version_name' => 'V1',
				'document_version_code' => 1,
				'document_file' => $new_name,
				'document_update_size' => $arrFiles[$strInputFileName]['size'][$i],
				'update_by_user_id' => $this->session->userdata('user_id'),
				'document_update_date' => date('Y-m-d'),
				'document_update_time' => date('H:i:s')
			);

			$this->documentversion_model->insert($version);

			if (!$this->upload->do_upload($strInputFileName)) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}
		}


		redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}
	public function document_upload_file_bulk($project_id, $document_parent_id)
	{
		$date1 = str_replace("-", "", date('Y-m-d'));
		$date2 = new DateTime(date('Y/m/d H:i:s', (time())));
		$id = $date1 . $date2->format('U');

		$new_name = "";
		if (!empty($_FILES["file"]['name'])) {
			$file = $_FILES["file"]['name'];

			if (preg_match('/\s/', $file)) {
				$new_name = preg_replace('/\s+/', '_', $file);
				$_FILES['file']['name'] = $new_name;
			} else {
				$new_name = $file;
			}

			$info 	  = pathinfo($new_name);
			$new_name = preg_replace('/[^\w]/', '_', $info["filename"]);
			$new_name = $new_name . "." . $info['extension'];
			$_FILES['file']['name'] = $new_name;
		}

		$size = $_FILES["file"]['size'];

		$config['upload_path'] 			= './uploads/documents/';
		$config['allowed_types']        = 'pdf|doc|docx|xls|xlsx|csv|png|jpg|jpeg|gif|txt';
		$config['overwrite'] 			= FALSE;
		$config['file_name'] 			= $new_name;

		$this->upload->initialize($config);
		$this->load->library('upload', $config);

		if (!$this->upload->do_upload('file')) {
			$error = array('error' => $this->upload->display_errors());
		} else {
			ini_set('max_execution_time', -1);
			ini_set('memory_limit', -1);
			$data = array('upload_data' => $this->upload->data());
			$file_type = pathinfo($data['upload_data']['file_name'], PATHINFO_EXTENSION);
			// if ($file_type == 'ifc') {
			// 	$command = NODEJS_COMMAND . ' ' . FCPATH . 'viewer/node_modules/@xeokit/xeokit-convert/convert2xkt.js -s ' . FCPATH . 'uploads/documents/' . $new_name . ' -o ' . FCPATH . 'uploads/documents/' . $new_name . '.xkt -l';
			// 	$outpuFile = FCPATH . '/viewer/dev/' . $id;
			// 	$processId = shell_exec(sprintf(
			// 		'%s > %s 2>&1 & echo ' . $id,
			// 		$command,
			// 		$outpuFile
			// 	));
			// }

			$file = base_url() . "uploads/documents/" . $new_name;

			// $file_code = $this->input->post('file_code')[$i];
			// $file_name = $this->input->post('file_name')[$i];

			$object = array(
				'document_id' => $id,
				'project_id' => $project_id,
				'document_type_id' => 1,
				'document_name' => $data['upload_data']['file_name'],
				'document_name_code' => "-",
				'document_file' => $new_name,
				'document_size' => $size,
				'document_upload_date' => date('Y-m-d'),
				'document_upload_time' => date('H:i:s'),
				'document_parent_id' => $document_parent_id
			);

			$this->document_model->insert($object);

			// // insert document version
			$version = array(
				'document_version_id' => $id,
				'document_id' => $id,
				'document_version_name' => 'V1',
				'document_version_code' => 1,
				'document_file' => $new_name,
				'document_update_size' => $size,
				'update_by_user_id' => $this->session->userdata('user_id'),
				'document_update_date' => date('Y-m-d'),
				'document_update_time' => date('H:i:s')
			);

			$this->documentversion_model->insert($version);

			echo json_encode(['data' => $id]);

			// $this->session->set_flashdata('success', "File Uploaded");
		}


		// redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}

	public function document_rename_file_bulk($project_id, $document_parent_id)
	{
		$file_code = $this->input->post('kode');
		$id = $this->input->post('idcek');

		if (count($id) > 0) {

			foreach ($id as $key => $value) {
				$object = array(
					'document_name_code' => $file_code[$key]
				);

				$this->document_model->update($value, $object);
			}
		}
		echo "cek";
		// redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}

	public function del_annotation()
	{
		$post = $this->input->post();
		$k = [];
		if (intval($post['edit_id']) > 0) {
			$this->db->where('id', intval($post['edit_id']));
			$this->db->delete('annotation');
			$k['list'] = $this->document_model->id_by_version_code($post['id'], $post['document_version_code']);
		}
		$k['id'] = $post['edit_id'];
		echo json_encode($k);
	}

	public function save_annotation()
	{
		$post = $this->input->post();
		$k = [];
		if (intval($post['edit_id']) > 0) {
			$object = array(
				'title' => $post['title'],
				'desc' => $post['desc'],
			);
			$this->db->where('id', intval($post['edit_id']));
			$this->db->update('annotation', $object);
			$k['id'] = intval($post['edit_id']);
		} else {
			$object = array(
				'title' => $post['title'],
				'desc' => $post['desc'],
				'document_id' => $post['id'],
				'kode' => $post['kode'],
				'posisi' => $post['posisi'],
				'object' => $post['obj'],
				'document_version_code' => $post['document_version_code'],
				'date' => Date('Y-m-d H:i:s'),
			);
			$this->db->insert('annotation', $object);
			$k['id'] = $this->db->insert_id();
		}
		$this->db->where('id', $k['id']);
		$this->db->from('annotation');
		$k['data'] = $this->db->get()->row_array();

		$k['list'] = $this->document_model->id_by_version_code($post['id'], $post['document_version_code']);
		echo json_encode($k);
	}

	public function document_upload_file($project_id, $document_parent_id)
	{
		$count = count($_FILES['file_assets']['name']);

		for ($i = 0; $i < $count; $i++) {
			$_FILES['file']['name'] = $_FILES['file_assets']['name'][$i];
			$_FILES['file']['type'] = $_FILES['file_assets']['type'][$i];
			$_FILES['file']['tmp_name'] = $_FILES['file_assets']['tmp_name'][$i];
			$_FILES['file']['error'] = $_FILES['file_assets']['error'][$i];
			$_FILES['file']['size'] = $_FILES['file_assets']['size'][$i];

			$date1 = str_replace("-", "", date('Y-m-d'));
			$date2 = new DateTime(date('Y/m/d H:i:s', (time() + $i)));
			$id = $date1 . $date2->format('U');

			$new_name = "";
			if (!empty($_FILES["file"])) {
				$file = $_FILES["file"]['name'];
				if (preg_match('/\s/', $file)) {
					$new_name = preg_replace('/\s+/', '_', $file);
					$_FILES['file']['name'] = $new_name;
				} else {
					$new_name = $file;
				}

				$info 	  = pathinfo($new_name);
				$new_name = preg_replace('/[^\w]/', '_', $info["filename"]);
				$new_name = $new_name . "." . $info['extension'];
				$_FILES['file']['name'] = $new_name;
			}

			$size = $_FILES["file"]['size'];

			$config['upload_path'] 			= './uploads/documents/';
			$config['allowed_types']        = 'pdf|doc|docx|xls|xlsx|csv|png|jpg|jpeg|gif|txt';
			$config['overwrite'] 			= FALSE;
			$config['file_name'] 			= $new_name;

			$this->upload->initialize($config);
			$this->load->library('upload', $config);

			if (!$this->upload->do_upload('file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
				$file = base_url() . "uploads/documents/" . $new_name;

				$file_code = $this->input->post('file_code')[$i];
				$file_name = $this->input->post('file_name')[$i];

				$object = array(
					'document_id' => $id,
					'project_id' => $project_id,
					'document_type_id' => 1,
					'document_name' => $file_name,
					'document_name_code' => $file_code,
					'document_file' => $new_name,
					'document_size' => $size,
					'document_upload_date' => date('Y-m-d'),
					'document_upload_time' => date('H:i:s'),
					'document_parent_id' => $document_parent_id
				);

				$this->document_model->insert($object);

				// insert document version
				$version = array(
					'document_version_id' => $id,
					'document_id' => $id,
					'document_version_name' => 'V1',
					'document_version_code' => 1,
					'document_file' => $new_name,
					'document_update_size' => $size,
					'update_by_user_id' => $this->session->userdata('user_id'),
					'document_update_date' => date('Y-m-d'),
					'document_update_time' => date('H:i:s')
				);

				$this->documentversion_model->insert($version);

				/*
				$message = "";
				$resOTDS = OTDSLogin();
				$objOTDS = json_decode($resOTDS);

				$resOTCS = OTCSTicket($objOTDS->ticket);
				$objOTCS = json_decode($resOTCS);

				$document_id = $id;
				$project_name = "1119001";
				$document_name_without_extension = "Document-" . $id . "-" . substr($new_name, 0, strrpos($new_name, "."));
				$is_delete = "false";
				$document_type = "image";

				$restCreateBW = curlCreateUpdateBW($objOTCS->ticket, $document_id, $project_name, $document_name_without_extension, $is_delete, $document_type);
				// klo error : {"timestamp":1612261341962,"status":500,"error":"Internal Server Error","message":"Could not receive Message.","path":"/xecm/api/v1/businessworkspaces"}
				// klo success : {"results":[506805]}
				$objCreateBW = json_decode($restCreateBW);
				//echo $objCreateBW->results[0]; // save results as BW_ID
				
				if(!empty($objCreateBW->results[0])){
					$document_name_with_extension = "Document-" . $id . "-" . $new_name;
					$type = "144"; // type for upload into DMS set to 144
					$restUpload = curlUploadDocumentIntoBW($objOTCS->ticket, $type, $objCreateBW->results[0], $document_name_with_extension, $_FILES["file_assets"]["tmp_name"]);
					// response success : {"links":{"data":{"self":{"body":"","content_type":"","href":"\/api\/v2\/nodes","method":"POST","name":""}}},"results":{"data":{"properties":{"container":false,"container_size":0,"create_date":"2021-02-02T17:40:15","create_user_id":308872,"description":"","description_multilingual":{"en":""},"external_create_date":null,"external_identity":"","external_identity_type":"","external_modify_date":null,"external_source":"","favorite":false,"id":505624,"mime_type":"application\/octet-stream","modify_date":"2021-02-02T17:40:15","modify_user_id":308872,"name":"Document-202102021612262370-Issue_Report_-_02-02-2021.pdf","name_multilingual":{"en":"Document-202102021612262370-Issue_Report_-_02-02-2021.pdf"},"owner":"adminWIN","owner_group_id":1001,"owner_user_id":308872,"parent_id":505914,"permissions_model":"advanced","reserved":false,"reserved_date":null,"reserved_shared_collaboration":false,"reserved_user_id":0,"size":7892,"size_formatted":"8 KB","type":144,"type_name":"Document","versions_control_advanced":false,"volume_id":505914}}}}

					$objUpload = json_decode($restUpload);
					//echo $objUpload->results->data->properties->id // save as FILE_ID

					// update document version, add bw_id and file_id
					$dms = array(
						"bw_id" => $objCreateBW->results[0],
						"file_id_dms" => $objUpload->results->data->properties->id
					);
					$this->documentversion_model->update($id, $dms);
					
					$this->session->set_flashdata('success', "File Uploaded");
				} else {
					$message = $objCreateBW->error . " : " . $objCreateBW->message . " - path:" . $objCreateBW->path; 
					$this->session->set_flashdata('error', $message);
				}
				*/

				$this->session->set_flashdata('success', "File Uploaded");
			}
		}

		redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}

	public function document_upload_new_version_file($project_id, $document_parent_id, $document_id)
	{
		$version = $this->document_model->get_document_latest_version($document_id);
		$next_version = (int)$version->document_version_code + 1;

		$date1 = str_replace("-", "", date('Y-m-d'));
		$date2 = new DateTime(date('Y/m/d H:i:s'));
		$id = $date1 . $date2->format('U');

		$new_name = "";
		if (!empty($_FILES["file_assets"])) {
			$file = $_FILES["file_assets"]['name'];
			if ($file == "blob") {
				$_FILES["file_assets"]['name'] = $_POST["file_name"];
				$file = $_FILES["file_assets"]['name'];
			}

			if (preg_match('/\s/', $file)) {
				$new_name = preg_replace('/\s+/', '_', $file);

				// rename file to next version
				$extention = substr($new_name, strrpos($new_name, '.'));
				$basename = substr($new_name, 0, strrpos($new_name, "."));
				$new_name = $basename . "_V" . $next_version . $extention;

				$_FILES['file_assets']['name'] = $new_name;
			} else {
				$new_name = $file;

				// rename file to next version
				$extention = substr($new_name, strrpos($new_name, '.'));
				$basename = substr($new_name, 0, strrpos($new_name, "."));
				$new_name = $basename . "_V" . $next_version . $extention;
			}

			$info 	  = pathinfo($new_name);
			$new_name = preg_replace('/[^\w]/', '_', $info["filename"]);
			$new_name = $id . "_" . $new_name . "." . $info['extension'];
			$_FILES['file_assets']['name'] = $new_name;
		}

		$size = $_FILES["file_assets"]['size'];

		$config['upload_path'] 			= './uploads/documents/';
		$config['allowed_types']        = 'pdf|doc|docx|xls|xlsx|csv|png|jpg|jpeg|gif|txt';
		$config['overwrite'] 			= FALSE;
		$config['file_name'] 			= $new_name;

		$this->upload->initialize($config);
		$this->load->library('upload', $config);

		if (!$this->upload->do_upload('file_assets')) {
			$error = array('error' => $this->upload->display_errors());
			redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
		} else {
			$data = array('upload_data' => $this->upload->data());
			$file = base_url() . "uploads/documents/" . $new_name;

			$object = array(
				'document_file' => $new_name
			);

			$this->document_model->update($document_id, $object);

			// insert document version
			$version = array(
				'document_version_id' => $id,
				'document_id' => $document_id,
				'document_version_name' => 'V' . $next_version,
				'document_version_code' => $next_version,
				'document_file' => $new_name,
				'document_update_size' => $size,
				'update_by_user_id' => $this->session->userdata('user_id'),
				'document_update_date' => date('Y-m-d'),
				'document_update_time' => date('H:i:s')
			);

			$this->documentversion_model->insert($version);

			//update approval document status (approval_status_id) to PROCESS
			$approval_doc = $this->approvaldocument_model->find_by_document_id($document_id);
			if (!empty($approval_doc)) {

				$approval = array(
					'approval_status_id' => 1,
				);

				$this->approvaldocument_model->update($approval_doc->approval_id, $approval);

				$version = $this->documentversion_model->document_id($document_id, $next_version);

				$date1 = str_replace("-", "", date('Y-m-d'));
				$date2 = new DateTime(date('Y/m/d H:i:s'));
				$rid = $date1 . $date2->format('U');

				$review = array(
					'review_id' => $rid,
					'approval_id' => $approval_doc->approval_id,
					'approval_status_id' => 1,
					'review_status_id' => 6,
					'document_version_id' => $version->document_version_id,
					'user_id'	  => $this->session->userdata('user_id'),
					'next_action_by_user_id' => $approval_doc->approval_approver_step_1
				);

				$this->approvalreview_model->insert($review);

				$this->session->set_flashdata('success', "Approval Document berhasil di submit ulang!");
			} else {
				$this->session->set_flashdata('Success', "Document Berhasil di update!");
			}

			redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
		}
	}

	public function document_rename_folder($project_id, $document_parent_id, $document_id)
	{
		$file_name = $this->input->post('folder_name');

		$object = array(
			'document_name' => $file_name
		);

		$this->document_model->update($document_id, $object);

		redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}

	public function document_rename_file($project_id, $document_parent_id, $document_id)
	{
		$file_code = $this->input->post('file_code');
		$file_name = $this->input->post('file_name');

		$object = array(
			'document_name' => $file_name,
			'document_name_code' => $file_code
		);

		$this->document_model->update($document_id, $object);

		redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}

	public function approval_cancel($project_id, $document_parent_id, $document_id)
	{
		$approval_docs 		= $this->approvaldocument_model->find_by_document_id($document_id);
		$approval_review 	= $this->approvalreview_model->list_review_by_approval_id($approval_docs->approval_id);

		if ($approval_docs != false && $approval_review != false) {
			// Delete all approval document and review data for this docs
			foreach ($approval_review as $row) {
				$this->approvalreview_model->delete($row->review_id);
			}
			$this->approvaldocument_model->delete($approval_docs->approval_id);

			$this->session->set_flashdata('success', "Approval canceled!");
		} else {
			$this->session->set_flashdata('error', "Approval not found");
		}

		redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
	}

	public function approval_request($project_id, $document_parent_id, $document_id, $document_version_code)
	{
		$message = "";
		$is_approval_valid = false;
		$is_site_engineering_officer = false;
		$is_site_engineering_manager = false;
		$is_project_manager = false;

		$site_engineering_officer = "";
		$site_engineering_manager = "";
		$project_manager = "";

		$user_id = $this->session->userdata('user_id');
		$user_member = $this->members_model->find_member_by_project($user_id, $project_id);
		if (!empty($user_member)) {
			if ($user_member->members_role_id == 15 || $user_member->members_role_id == 24 || $user_member->members_role_id == 25) {
				$a['members'] = $this->members_model->get_members_by_project_id($project_id);

				// check apakah file telah disubmit sebelumnya oleh initiator (site engineering officer)
				$doc = $this->approvaldocument_model->find_submitted_document($document_id, $user_id);
				if (empty($doc)) {

					foreach ($a['members'] as $row) {
						if ($row->members_role_id == 15) {
							// Project Manager
							$is_project_manager = true;
							$project_manager = $row->user_id;
						} else if ($row->members_role_id == 24) {
							// Site Engineering Manager
							$is_site_engineering_manager = true;
							$site_engineering_manager = $row->user_id;
						} else if ($row->members_role_id == 25) {
							// Site Engineering Officer
							$is_site_engineering_officer = true;
							$site_engineering_officer = $row->user_id;
						}
					}

					if ($is_site_engineering_officer == true && $is_site_engineering_manager == true && $is_project_manager == true) {
						$is_approval_valid = true;

						if ($user_member->members_role_id == 25) {
							// members role == 25 (Site Engineering Officer)

							// check apakah document disubmit oleh site engineering manager sebelumnya atau tidak
							$approval_doc = $this->approvaldocument_model->find_by_document_id($document_id);
							if (empty($approval_doc)) {
								$initiator = $user_member->user_id;

								$date1 = str_replace("-", "", date('Y-m-d'));
								$date2 = new DateTime(date('Y/m/d H:i:s'));
								$aid = $date1 . $date2->format('U');

								$approval = array(
									'approval_id' => $aid,
									'approval_status_id' => 1,
									'approval_step_id' => 2,
									'document_id' => $document_id,
									'initiator'	  => $this->session->userdata('user_id'),
									'approval_approver_step_1' => $site_engineering_manager,
									'approval_approver_step_2' => $project_manager
								);
								$this->approvaldocument_model->insert($approval);
								$param = [
									'owner' => $this->session->userdata('user_id'),
									'assign_to' => $site_engineering_manager,
									'notif_modul_id' => 'approve-project',
									'notif_project_id' => $project_id,
									'notif_action_id' => $document_id,
									'notif_parent_id' => $document_parent_id,
									'notif_version_id' => $document_version_code,
									'message' => "Assign Approve Document Untuk Anda"
								];
								send_notif($param);

								$version = $this->documentversion_model->document_id($document_id, $document_version_code);

								$date1 = str_replace("-", "", date('Y-m-d'));
								$date2 = new DateTime(date('Y/m/d H:i:s'));
								$rid = $date1 . $date2->format('U');

								$review = array(
									'review_id' => $rid,
									'approval_id' => $aid,
									'approval_status_id' => 1,
									'review_status_id' => 1,
									'document_version_id' => $version->document_version_id,
									'user_id'	  => $this->session->userdata('user_id'),
									'next_action_by_user_id' => $site_engineering_manager
								);

								$this->approvalreview_model->insert($review);

								$this->session->set_flashdata('success', "Approval Document berhasil di submit!");
							} else {
								$this->session->set_flashdata('error', "Document telah disubmit oleh Site Engineering Manager!");
							}
						} else if ($user_member->members_role_id == 24) {
							// members role == 24 (Site Engineering Manager)

							// check apakah document disubmit oleh site engineering officer sebelumnya atau tidak, jika kosong yg submit berarti site engineering manager
							$approval_doc = $this->approvaldocument_model->find_by_document_id($document_id);

							if (empty($approval_doc)) {
								$initiator = $user_member->user_id;

								$date1 = str_replace("-", "", date('Y-m-d'));
								$date2 = new DateTime(date('Y/m/d H:i:s'));
								$aid = $date1 . $date2->format('U');

								$approval = array(
									'approval_id' => $aid,
									'approval_status_id' => 1,
									'approval_step_id' => 1,
									'document_id' => $document_id,
									'initiator'	  => $this->session->userdata('user_id'),
									'approval_approver_step_1' => $project_manager
								);

								$this->approvaldocument_model->insert($approval);

								$param = [
									'owner' => $this->session->userdata('user_id'),
									'assign_to' => $project_manager,
									'notif_modul_id' => 'approve-project',
									'notif_project_id' => $project_id,
									'notif_action_id' => $document_id,
									'notif_parent_id' => $document_parent_id,
									'notif_version_id' => $document_version_code,
									'message' => "Assign Approve Document Untuk Anda"
								];
								send_notif($param);

								$version = $this->documentversion_model->document_id($document_id, $document_version_code);

								$date1 = str_replace("-", "", date('Y-m-d'));
								$date2 = new DateTime(date('Y/m/d H:i:s'));
								$rid = $date1 . $date2->format('U');

								$review = array(
									'review_id' => $rid,
									'approval_id' => $aid,
									'approval_status_id' => 1,
									'review_status_id' => 2,
									'document_version_id' => $version->document_version_id,
									'user_id'	  => $this->session->userdata('user_id'),
									'next_action_by_user_id' => $project_manager
								);

								$this->approvalreview_model->insert($review);

								$this->session->set_flashdata('success', "Approval Document berhasil di submit!");
							} else {

								// check apakah approval_status_id = 2 (APPROVED)
								if ($approval_doc->approval_status_id != 2) {

									// jika approval_status_id = 1 (PROCESS)
									$approval_review = $this->approvalreview_model->find_by_document_id_and_user_id($document_id, $document_version_code, $this->session->userdata('user_id'));
									if (empty($approval_review)) {

										// fungsi ini dipakai di public function request_next
										/*
										$date1 = str_replace("-", "", date('Y-m-d'));
										$date2 = new DateTime(date('Y/m/d H:i:s'));
										$rid = $date1 . $date2->format('U');
	
										$review = array(
											'review_id' => $rid,
											'approval_id' => $approval_doc->approval_id,
											'review_status_id' => 2,
											'user_id'	  => $this->session->userdata('user_id'),								
											'next_action_by_user_id' => $project_manager					
										);
	
										$this->approvalreview_model->insert($review);
	
										$this->session->set_flashdata('success', "Approval Document berhasil di teruskan ke Project Manger!");								
										*/

										$this->session->set_flashdata('error', "Silahkan lakukan review terhadap documen yang telah disubmit!");
									} else {
										$this->session->set_flashdata('error', "Document telah di submit untuk proses Approval!");
									}
								} else {
									$this->session->set_flashdata('error', "Document telah selesai di Approve sebelumnya!");
								}
							}
						}

						// fungsi ini dipakai di public function request_next
						/*
						else if($user_member->members_role_id == 15){
							// members role == 15 (Project Manager)
							
							// check apakah document disubmit oleh site engineering manager sebelumnya atau tidak
							$approval_doc = $this->approvaldocument_model->find_by_document_id($document_id);
							
							if(!empty($approval_doc)){
								
								// check apakah approval_status_id = 2 (APPROVED)
								if($approval_doc->approval_status_id != 2){
									$version = $this->documentversion_model->document_id($document_id, $document_version_code);

									$date1 = str_replace("-", "", date('Y-m-d'));
									$date2 = new DateTime(date('Y/m/d H:i:s'));
									$rid = $date1 . $date2->format('U');
	
									$review = array(
										'review_id' => $rid,
										'approval_id' => $approval_doc->approval_id,
										'review_status_id' => 5,
										'document_version_id' => $version->document_version_id,									
										'user_id'	  => $this->session->userdata('user_id'),								
										'next_action_by_user_id' => 0					
									);
	
									$this->approvalreview_model->insert($review);
	
									$object = array(
										'approval_status_id' => 2
									);
	
									$this->approvaldocument_model->update($approval_doc->approval_id, $object);
	
									$this->session->set_flashdata('success', "Document telah selesai di Approve!");									
								} else {
									$this->session->set_flashdata('error', "Document telah selesai di Approve sebelumnya!");								
								}
															
							} else {
								$this->session->set_flashdata('error', "Document belum disubmit oleh Site Engineering Officer / Manager!");															
							}
						}
						*/

						redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
					} else if ($is_site_engineering_officer == true && $is_site_engineering_manager == true) {
						$message = "Project Manager belum ada pada project ini";
					} else if ($is_site_engineering_officer == true && $is_project_manager == true) {
						$message = "Site Engineering Manager belum ada pada project ini";
					} else if ($is_site_engineering_manager == true && $is_project_manager == true) {
						$message = "Site Engineering Officer belum ada pada project ini";
					} else if ($is_site_engineering_officer == true) {
						$message = "Site Engineering Manager dan Project Manager belum ada pada project ini";
					} else if ($is_site_engineering_manager == true) {
						$message = "Site Engineering Officer dan Project Manager belum ada pada project ini";
					} else if ($is_project_manager == true) {
						$message = "Site Engineering Officer dan Site Engineering Manager belum ada pada project ini";
					} else {
						$message = "Site Engineering Office, Site Engineering Manager dan Project Manager belum ada pada project ini";
					}
				} else {
					if ($doc->approval_status_id == 1) {
						$message = "Document telah di submit untuk proses Approval";
					} else if ($doc->approval_status_id == 2) {
						$message = "Document telah selesai di Approve sebelumnya";
					}
				}
			} else {
				$message = "Anda tidak memiliki akses untuk Approval Document";
			}
		} else {
			$message = "Anda belum terdaftar menjadi member di dalam project ini!";
		}

		if ($is_approval_valid == false) {
			$this->session->set_flashdata('error', $message);
			redirect($this->module . '/project/document/' . $project_id . "/" . $document_parent_id, 'refresh');
		}
	}

	public function approval_next($project_id, $document_parent_id, $document_id, $document_version_code, $review_status_id)
	{
		$message = "";
		$is_approval_valid = false;
		$is_site_engineering_officer = false;
		$is_site_engineering_manager = false;
		$is_project_manager = false;

		$site_engineering_officer = "";
		$site_engineering_manager = "";
		$project_manager = "";

		$user_id = $this->session->userdata('user_id');
		$user_member = $this->members_model->find_member_by_project($user_id, $project_id);
		if (!empty($user_member)) {
			if ($user_member->members_role_id == 15 || $user_member->members_role_id == 24 || $user_member->members_role_id == 25) {
				$a['members'] = $this->members_model->get_members_by_project_id($project_id);

				// check apakah file telah disubmit sebelumnya oleh initiator (site engineering officer)
				$doc = $this->approvaldocument_model->find_submitted_document($document_id, $user_id);
				if (empty($doc)) {
					//var_dump($a['members']);

					foreach ($a['members'] as $row) {
						if ($row->members_role_id == 15) {
							// Project Manager
							$is_project_manager = true;
							$project_manager = $row->user_id;
						} else if ($row->members_role_id == 24) {
							// Site Engineering Manager
							$is_site_engineering_manager = true;
							$site_engineering_manager = $row->user_id;
						} else if ($row->members_role_id == 25) {
							// Site Engineering Officer
							$is_site_engineering_officer = true;
							$site_engineering_officer = $row->user_id;
						}
					}

					if ($is_site_engineering_officer == true && $is_site_engineering_manager == true && $is_project_manager == true) {
						$is_approval_valid = true;

						if ($user_member->members_role_id == 24) {
							// members role == 24 (Site Engineering Manager)

							// check apakah document disubmit oleh site engineering officer sebelumnya atau tidak, jika kosong yg submit berarti site engineering manager
							$approval_doc = $this->approvaldocument_model->find_by_document_id($document_id);

							if (!empty($approval_doc)) {
								// check apakah approval_status_id = 2 (APPROVED)

								if ($approval_doc->approval_status_id != 2) {

									// jika approval_status_id = 1 (PROCESS)
									// $approval_review = $this->approvalreview_model->find_by_document_id_and_user_id($document_id, $document_version_code, $this->session->userdata('user_id'));
									// if(empty($approval_review)){
									$version = $this->documentversion_model->document_id($document_id, $document_version_code);

									$date1 = str_replace("-", "", date('Y-m-d'));
									$date2 = new DateTime(date('Y/m/d H:i:s'));
									$rid = $date1 . $date2->format('U');

									$approval_status_id = 1;
									$next_user = $approval_doc->initiator;
									$msg = "Reject Document Anda";
									if ($review_status_id == 2) {
										// approved
										$approval_status_id = 1;
										$next_user = $project_manager;
										$msg = "Assign Approve Document Untuk Anda";
									} else if ($review_status_id == 3) {
										// rejected
										$approval_status_id = 3;
									}

									$review = array(
										'review_id' => $rid,
										'approval_id' => $approval_doc->approval_id,
										'approval_status_id' => $approval_status_id,
										'review_status_id' => $review_status_id,
										'document_version_id' => $version->document_version_id,
										'user_id'	  => $this->session->userdata('user_id'),
										'next_action_by_user_id' => $next_user
									);

									if ($review_status_id == 3) {
										$review['review_comment'] = $this->input->post('reject_reason');
									}

									$this->approvalreview_model->insert($review);
									$param = [
										'owner' => $this->session->userdata('user_id'),
										'assign_to' => $next_user,
										'notif_modul_id' => 'approve-project',
										'notif_project_id' => $project_id,
										'notif_action_id' => $document_id,
										'notif_parent_id' => $document_parent_id,
										'notif_version_id' => $document_version_code,
										'message' => $msg
									];
									send_notif($param);

									if ($review_status_id == 2) {
										$this->session->set_flashdata('success', "Approval Document berhasil di teruskan ke Project Manger!");
									} else if ($review_status_id == 3) {
										$object = array(
											'approval_status_id' => 3
										);

										$this->approvaldocument_model->update($approval_doc->approval_id, $object);

										$this->session->set_flashdata('error', "Document berhasil di Reject!");
									}

									// } else {
									// 	$this->session->set_flashdata('error', "Document telah di submit untuk proses Approval!");									
									// }

								} else {
									$this->session->set_flashdata('error', "Document telah selesai di Approve sebelumnya!");
								}
							}
						} else if ($user_member->members_role_id == 15) {
							// members role == 15 (Project Manager)

							// check apakah document disubmit oleh site engineering manager sebelumnya atau tidak
							$approval_doc = $this->approvaldocument_model->find_by_document_id($document_id);

							//var_dump($approval_doc->approval_approver_step_2);
							if (!empty($approval_doc)) {

								// PM tidak bisa bypass approval dari site engineering officer, harus lewati site engineering manager dahulu
								$is_next = $this->approvalreview_model->find_by_document_id_and_next_action_user($document_id, $document_version_code, $this->session->userdata('user_id'));
								if (!empty($is_next)) {

									// check apakah approval_status_id = 2 (APPROVED)
									if ($approval_doc->approval_status_id != 2) {
										$version = $this->documentversion_model->document_id($document_id, $document_version_code);

										$date1 = str_replace("-", "", date('Y-m-d'));
										$date2 = new DateTime(date('Y/m/d H:i:s'));
										$rid = $date1 . $date2->format('U');

										$approval_status_id = 1;
										$next_user = $approval_doc->initiator;
										$msg = "Reject Document Anda";
										if ($review_status_id == 5) {
											// approved
											$approval_status_id = 2;

											$msg = "Approved Document Untuk Anda";
										} else if ($review_status_id == 4) {
											// rejected
											$approval_status_id = 3;
										}

										$review = array(
											'review_id' => $rid,
											'approval_id' => $approval_doc->approval_id,
											'approval_status_id' => $approval_status_id,
											'review_status_id' => $review_status_id,
											'document_version_id' => $version->document_version_id,
											'user_id'	  => $this->session->userdata('user_id'),
											'next_action_by_user_id' => $next_user
										);

										if ($review_status_id == 4) {
											$review['review_comment'] = $this->input->post('reject_reason');
										}

										$this->approvalreview_model->insert($review);
										$param = [
											'owner' => $this->session->userdata('user_id'),
											'assign_to' => $next_user,
											'notif_modul_id' => 'approve-project',
											'notif_project_id' => $project_id,
											'notif_action_id' => $document_id,
											'notif_parent_id' => $document_parent_id,
											'notif_version_id' => $document_version_code,
											'message' => $msg
										];
										send_notif($param);

										if ($review_status_id == 5) {
											$object = array(
												'approval_status_id' => 2
											);

											$this->approvaldocument_model->update($approval_doc->approval_id, $object);

											$this->session->set_flashdata('success', "Document telah selesai di Approve!");
										} else if ($review_status_id == 4) {
											$object = array(
												'approval_status_id' => 3
											);

											$this->approvaldocument_model->update($approval_doc->approval_id, $object);

											$this->session->set_flashdata('error', "Document berhasil di Reject!");
										}
									} else {
										$this->session->set_flashdata('error', "Document telah selesai di Approve sebelumnya!");
									}
								} else {
									$this->session->set_flashdata('error', "Project Manager tidak bisa bypass approval document. Silahkan tunggu approval dari Site Engineering Manager terlebih dahulu!");
								}
							} else {
								$this->session->set_flashdata('error', "Document belum disubmit oleh Site Engineering Officer / Manager!");
							}
						}

						redirect($this->module . '/project/document_view/' . $project_id . "/" . $document_parent_id . "/" . $document_id . "/" . $document_version_code, 'refresh');
					} else if ($is_site_engineering_officer == true && $is_site_engineering_manager == true) {
						$message = "Project Manager belum ada pada project ini";
					} else if ($is_site_engineering_officer == true && $is_project_manager == true) {
						$message = "Site Engineering Manager belum ada pada project ini";
					} else if ($is_site_engineering_manager == true && $is_project_manager == true) {
						$message = "Site Engineering Officer belum ada pada project ini";
					} else if ($is_site_engineering_officer == true) {
						$message = "Site Engineering Manager dan Project Manager belum ada pada project ini";
					} else if ($is_site_engineering_manager == true) {
						$message = "Site Engineering Officer dan Project Manager belum ada pada project ini";
					} else if ($is_project_manager == true) {
						$message = "Site Engineering Officer dan Site Engineering Manager belum ada pada project ini";
					} else {
						$message = "Site Engineering Office, Site Engineering Manager dan Project Manager belum ada pada project ini";
					}
				} else {
					if ($doc->approval_status_id == 1) {
						$message = "Document telah di submit untuk proses Approval";
					} else if ($doc->approval_status_id == 2) {
						$message = "Document telah selesai di Approve sebelumnya";
					}
				}
			} else {
				$message = "Anda tidak memiliki akses untuk Approval Document";
			}
		} else {
			$message = "Anda belum terdaftar menjadi member di dalam project ini!";
		}

		if ($is_approval_valid == false) {
			$this->session->set_flashdata('error', $message);
			redirect($this->module . '/project/document_view/' . $project_id . "/" . $document_parent_id . "/" . $document_id . "/" . $document_version_code, 'refresh');
		}
	}

	public function folder_delete($document_id)
	{
		$fileinfo = $this->document_model->id($document_id);
		$docs = $this->documentversion_model->document_all_version($document_id);

		$fileCount = $this->document_model->count_document_by_filename($fileinfo->document_file);
		$new_name = "";

		if ($fileinfo != null) {
			$files = $this->document_model->list_file_per_project($fileinfo->project_id, $document_id);
			if ($fileinfo->document_parent_id != 0 && $files === false) {
				$this->document_model->delete($document_id);
				$this->session->set_flashdata('success', "Folder deleted");
			} else {
				$this->session->set_flashdata('error', "Folder not empty");
			}
		} else {
			$this->session->set_flashdata('error', "Folder delete failed");
		}

		redirect($this->module . '/project/document/' . $fileinfo->project_id . "/" . $fileinfo->document_parent_id, 'refresh');
	}

	public function approval_review($project_id, $approval_id)
	{
		$division = $this->project_model->get_business_unit_by_project_id($project_id);
		$a['div'] = $this->businessunit_model->find($division->business_unit_id);
		$a['data'] = $this->approvalreview_model->list_review_by_approval_id($approval_id);

		$a['documentVersion'] = $this->approvalreview_model->getDocumentVersion($approval_id); // get 1
		$a['documentId'] = $this->documentversion_model->find($a['documentVersion']->document_version_id);

		$a['document'] = $this->document_model->id($a['documentId']->document_id);

		$breadcrumb_sub_1 = array(
			'name' => 'Project',
			'link' => $this->module . '/project',
		);
		$a['breadcrumb_sub_1'] = $breadcrumb_sub_1;

		$breadcrumb_sub_2 = array(
			'name' => 'Project Home',
			'link' => $this->module . '/project/detail/' . $project_id,
		);
		$a['breadcrumb_sub_2'] = $breadcrumb_sub_2;

		$breadcrumb_sub_3 = array(
			'name' => 'Document Management',
			'link' => $this->module . '/project/document/' . $project_id . '/0',
		);
		$a['breadcrumb_sub_3'] = $breadcrumb_sub_3;

		if ($a['document']->document_parent_id == 1) {
			$breadcrumb = 'Work In Progress';
		} else if ($a['document']->document_parent_id == 2) {
			$breadcrumb = 'Shared';
		} else if ($a['document']->document_parent_id == 3) {
			$breadcrumb = 'Published';
		} else if ($a['document']->document_parent_id == 4) {
			$breadcrumb = 'Archive';
		} else { // jika masuk sub folder maka get nama folder untuk dijadikan title
			$breadcrumb = $this->document_model->get_document_project($project_id, $a['document']->document_parent_id)->document_name;
		}

		$breadcrumb_sub_4 = array(
			'name' => $breadcrumb,
			'link' => $this->module . '/project/document/' . $project_id . '/' . $a['document']->document_parent_id,
		);
		$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;

		$a['title'] = $a['document']->document_name_code . ' ' . $a['documentId']->document_version_name;

		$a['project_id'] = $project_id;
		$a['data'] = $this->approvalreview_model->list_review_by_approval_id($approval_id);
		$a['page'] = "document_review";
		// $a['title'] = "Document Review";
		$this->load->view('dashboard_system_admin', $a);
	}

	public function download_cek()
	{
		$post = explode(",", $this->input->post('id'));
		$result = [];
		foreach ($post as $key => $value) {
			$result[] = base_url('projectadmin/project/document_download/' . $value);
		}

		echo json_encode($result);
	}

	public function document_download($document_id)
	{
		$fileinfo = $this->document_model->id($document_id);
		$file_url = FCPATH . 'uploads/documents/' . $fileinfo->document_file;

		$this->load->helper('download');
		force_download($file_url, NULL);
	}

	public function document_delete($document_id)
	{
		$fileinfo = $this->document_model->id($document_id);
		$docs = $this->documentversion_model->document_all_version($document_id);

		$fileCount = $this->document_model->count_document_by_filename($fileinfo->document_file);
		$new_name = "";

		if ($docs != false) {
			foreach ($docs as $doc) {
				$this->documentversion_model->delete($doc->document_version_id);
				if ($fileCount == 1) {
					$path = FCPATH . "uploads/documents/" . $doc->document_file;
					if (file_exists($path)) {
						unlink($path);
					}
				}
			}
		}

		$this->document_model->delete($document_id);
		if ($fileCount == 1) {
			$path = FCPATH . "uploads/documents/" . $fileinfo->document_file;
			if (file_exists($path)) {
				unlink($path);
			}

			$new_name = $fileinfo->document_file;
		}

		// $message = "";
		// $resOTDS = OTDSLogin();
		// $objOTDS = json_decode($resOTDS);

		// $resOTCS = OTCSTicket($objOTDS->ticket);
		// $objOTCS = json_decode($resOTCS);

		// $project_name = "1119001";
		// $document_name_without_extension = "Document-" . $document_id . "-" . substr($new_name, 0, strrpos($new_name, "."));
		// $is_delete = "true";
		// $document_type = "image";

		// $restCreateBW = curlCreateUpdateBW(
		// 	$objOTCS->ticket, 
		// 	$document_id, 
		// 	$project_name, 
		// 	$document_name_without_extension, 
		// 	$is_delete, 
		// 	$document_type
		// );
		// $objCreateBW = json_decode($restCreateBW);

		// if(!empty($objCreateBW->results[0])){
		// 	$this->session->set_flashdata('success', "File Deleted");
		// } else {
		// 	$message = $objCreateBW->error . " : " . $objCreateBW->message . " - path:" . $objCreateBW->path; 
		// 	$this->session->set_flashdata('error', $message);
		// }

		redirect($this->module . '/project/document/' . $fileinfo->project_id . "/" . $fileinfo->document_parent_id, 'refresh');
	}

	public function handlePermission($create, $read, $update, $hapus, $project, $user)
	{

		$this->members_model->handlePermission($create, $read, $update, $hapus, $project, $user);

		redirect($this->module . '/project/detail/' . $project, 'refresh');
	}

	public function getDataModalGaris($projectId, $tanggal)
	{

		$data = $this->issue_model->getDataModalGaris($projectId, $tanggal);

		echo json_encode($data);
	}

	public function getDataModalDonat($projectId, $flag, $startDate, $endDate)
	{

		$data = $this->issue_model->getDataModalDonat($projectId, $flag, $startDate, $endDate);

		echo json_encode($data);
	}

	public function getDataModelDocument($projectId)
	{

		$data = $this->document_model->getDocumentPerProject($projectId);

		echo json_encode($data);
	}

	public function getDataModelWaitingDocument($projectId)
	{

		$data = $this->document_model->getDocumentWaitingPerProject($projectId);

		echo json_encode($data);
	}

	public function getDataModelApproveDocument($projectId)
	{

		$data = $this->document_model->getDocumentApprovePerProject($projectId);

		echo json_encode($data);
	}
	public function log_document($project_id, $document_id){
		// doi::dump($this->session->userdata('user_id'));
		$division = $this->project_model->get_business_unit_by_project_id($project_id);
		$a['div'] = $this->businessunit_model->find($division->business_unit_id);	
		$a['data'] = $this->document_model->get_log_document($project_id, $document_id);
		$a['user'] = $this->document_model->get_user_document($project_id, $document_id);
  		$a['documentId'] = $this->documentversion_model->find($document_id);
		$a['document'] = $this->document_model->id($document_id	);
 
		$this->mybreadcrumb->add('Division', base_url() .'/projectadmin/division');
		$this->mybreadcrumb->add('Division Project', base_url() .'/projectadmin/project/div/'. $a['div']->business_unit_id);
		$this->mybreadcrumb->add('Project Home', base_url().'/projectadmin/project/detail/'.$project_id);
		$this->mybreadcrumb->add('Document Management', base_url() .'/projectadmin/project/document/'. $project_id.'/0');
		
		if($a['document']->document_parent_id == 1) {
			$breadcrumb = 'Work In Prograaess';
		} else if($a['document']->document_parent_id == 2) {
			$breadcrumb = 'Shared';
		} else if($a['document']->document_parent_id == 3) {
			$breadcrumb = 'Published';
			$breadcrumb = 'Archive';
		} else if($a['document']->document_parent_id == 4){
		} else { // jika masuk sub folder maka get nama folder untuk dijadikan title
			$breadcrumb = $this->document_model->get_document_project($project_id, $a['document']->document_parent_id)->document_name;
		}
		$this->mybreadcrumb->add($breadcrumb, base_url().'/projectadmin/project/document/' . $project_id.'/'.$a['document']->document_parent_id);

		// $this->mybreadcrumb->add($breadcrumb, base_url().'/projectadmin/project/document/' . $project_id.'/'.$document_id);
		// $this->mybreadcrumb->add($breadcrumb, base_url().'/projectadmin/project/document/' . $project_id.'/'.$document_id);
		// $this->mybreadcrumb->add($a['document']->document_name_code. ' ', '#');
		$this->mybreadcrumb->add($a['document']->document_name_code. ' '. $a['documentId']->document_version_name, '#');

	  	// $breadcrumb = 'Work In Progress';
		// } else if($a['document']->document_
		$a['breadcrumbs'] = $this->mybreadcrumb->render();

		$a['previous_document_parent_id'] = $this->document_model->id($a['document']->document_id)->document_parent_id;
 
		// breadcrumb dokumen management lvl 5
		$breadcrumb_sub_3 = array(
			'name' => 'Document Management',
			'link' => 'projectadmin/project/document/' . $project_id.'/0',
		);
		$a['breadcrumb_sub_3'] = $breadcrumb_sub_3;

		if($a['previous_document_parent_id'] == 1) {
			$breadcrumb = 'Work In Progress';
		} else if($a['previous_document_parent_id'] == 2) {
			$breadcrumb = 'Shared';
		} else if($a['previous_document_parent_id'] == 3) {
			$breadcrumb = 'Published';
		} else if($a['previous_document_parent_id'] == 4){
			$breadcrumb = 'Archive';
		} else { // jika masuk sub folder maka get nama folder untuk dijadikan title
			// $breadcrumb = $this->document_model->get_document_project($project_id, $a['previous_document_parent_id'])->document_name;
		}

		$breadcrumb_sub_4 = array(
			'name' => $breadcrumb,
			'link' => 'projectadmin/project/document/' . $project_id.'/'.$document_id,
		);
		$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
		
		$a['title'] = "Log Document";
		// end breadcrumb dokumen management lvl 5
		// end tambahan update

		$a['page'] = "log_document";
		// $a['title'] = "Document Review";
		$this->load->view('dashboard_system_admin', $a);	
	}
	public function log_document_trash($project_id){
		// doi::dump($project_id);
		$division = $this->project_model->get_business_unit_by_project_id($project_id);
		$a['div'] = $this->businessunit_model->find($division->business_unit_id);	
		$a['data'] = $this->document_model->get_log_document_trash($project_id);
		// doi::dump($a['data']);
		// $a['user'] = $this->document_model->get_user_document($project_id, $document_id);
  		// $a['documentId'] = $this->documentversion_model->find($document_id);
		// $a['document'] = $this->document_model->id($document_id	);
 
		$this->mybreadcrumb->add('Division', base_url() .'/projectadmin/division');
		$this->mybreadcrumb->add('Division Project', base_url() .'/projectadmin/project/div/'. $a['div']->business_unit_id);
		$this->mybreadcrumb->add('Project Home', base_url().'/projectadmin/project/detail/'.$project_id);
		$this->mybreadcrumb->add('Document Management', base_url() .'/projectadmin/project/document/'. $project_id.'/0');
		$this->mybreadcrumb->add('Recycle Bin', base_url() .'/projectadmin/project/document/'. $project_id.'/0');
		
		// if($a['document']->document_parent_id == 1) {
		// 	$breadcrumb = 'Work In Prograaess';
		// } else if($a['document']->document_parent_id == 2) {
		// 	$breadcrumb = 'Shared';
		// } else if($a['document']->document_parent_id == 3) {
		// 	$breadcrumb = 'Published';
		// 	$breadcrumb = 'Archive';
		// } else if($a['document']->document_parent_id == 4){
		// } else { // jika masuk sub folder maka get nama folder untuk dijadikan title
		// 	$breadcrumb = $this->document_model->get_document_project($project_id, $a['document']->document_parent_id)->document_name;
		// }
		// $this->mybreadcrumb->add($breadcrumb, base_url().'/projectadmin/project/document/' . $project_id.'/'.$a['document']->document_parent_id);

		// $this->mybreadcrumb->add($breadcrumb, base_url().'/projectadmin/project/document/' . $project_id.'/'.$document_id);
		// $this->mybreadcrumb->add($breadcrumb, base_url().'/projectadmin/project/document/' . $project_id.'/'.$document_id);
		// $this->mybreadcrumb->add($a['document']->document_name_code. ' ', '#');
		// $this->mybreadcrumb->add($a['document']->document_name_code. ' '. $a['documentId']->document_version_name, '#');

	  	// $breadcrumb = 'Work In Progress';
		// } else if($a['document']->document_
		$a['breadcrumbs'] = $this->mybreadcrumb->render();

		// $a['previous_document_parent_id'] = $this->document_model->id($a['document']->document_id)->document_parent_id;
 
		// breadcrumb dokumen management lvl 5
		$breadcrumb_sub_3 = array(
			'name' => 'Document Management',
			'link' => 'projectadmin/project/document/' . $project_id.'/0',
		);
		$a['breadcrumb_sub_3'] = $breadcrumb_sub_3;

		// if($a['previous_document_parent_id'] == 1) {
		// 	$breadcrumb = 'Work In Progress';
		// } else if($a['previous_document_parent_id'] == 2) {
		// 	$breadcrumb = 'Shared';
		// } else if($a['previous_document_parent_id'] == 3) {
		// 	$breadcrumb = 'Published';
		// } else if($a['previous_document_parent_id'] == 4){
		// 	$breadcrumb = 'Archive';
		// } else { // jika masuk sub folder maka get nama folder untuk dijadikan title
		// 	// $breadcrumb = $this->document_model->get_document_project($project_id, $a['previous_document_parent_id'])->document_name;
		// }

		$breadcrumb_sub_4 = array(
			'name' => "recycle bin",
			'link' => 'projectadmin/project/document/' . $project_id.'/0',
		);
		$a['breadcrumb_sub_4'] = $breadcrumb_sub_4;
		
		$a['title'] = "Log Document Tras";
		// end breadcrumb dokumen management lvl 5
		// end tambahan update

		$a['page'] = "log_document_trash";
		$a['title'] = "Document Trash";
		$this->load->view('dashboard_system_admin', $a);	
	}
	public function document_download_trash($document_id){
		$fileinfo=$this->documentversion_model->find($document_id);
		$file_url = FCPATH . 'uploads/trash/' . $fileinfo->document_file;

		if (file_exists($file_url)) {
			$file_url = $file_url;
 		} else {
 			$file_url = FCPATH . 'uploads/documents/' . $fileinfo->document_file;
		 }

		// $fileinfo = $this->document_model->id($document_id);
			// 	doi::dump($fileinfo);
			// doi::dump($file_url);
			// die();
		$this->load->helper('download');
		force_download($file_url, NULL);
	}


	public function delete_trash($documentIdLog) { 
		$docLog = $this->mylib->get_log_byIdLog($documentIdLog);
		$documentId=$docLog[0]->document_id;
		$fileinfo = $this->document_model->id($documentId);
		// doi::dump($fileinfo);
		// die("tess");
		$fileCount = $this->document_model->count_document_by_filename($fileinfo->document_file);
		$fileDeletionSuccess = false;
	
		if ($fileCount == 1) {
			$path = FCPATH . "uploads/trash/" . $fileinfo->document_file;
			if (file_exists($path)) {
				if (unlink($path)) {
					$fileDeletionSuccess = true;
				}
			}
		}

		$del=$this->document_model->delete_trash($documentId);
		echo json_encode([
			'success' => true,
			'fileDeleted' => $fileDeletionSuccess, 
 			'message' => 'Document deleted permanen successfully',
		]);
		exit;
	}
	
	public function restore($id) {
		$doc = $this->document_model->id($id);
	
		$object = array(
			'status' => 0
		);
		$this->db->where('document_id', $id);
		$res = $this->db->update('document', $object);
		if ($res) {
			$fileinfos = $this->documentversion_model->document_all_version($id);
			$fileById = $this->document_model->id($id);
	
			if ($fileinfos !== null) {
				foreach ($fileinfos as $fileinfo) {
					$trashFolder = FCPATH . 'uploads/trash/';
					$sourceFilePath = FCPATH . 'uploads/documents/' . $fileinfo->document_file;
					$trashedFilePath = $trashFolder . $fileinfo->document_file;
	
					// Restore file from trash folder
					$trashFile = $trashFolder . $fileinfo->document_file;
					$restoredFile = FCPATH . 'uploads/documents/' . $fileinfo->document_file;
	
					if (file_exists($trashFile) && rename($trashFile, $restoredFile)) {
						// Update database status
						$this->db->where('document_id', $fileinfo->id);
						$this->db->update('document', array('status' => 1));
	
						// Insert log
						$log_data = array(
							'document_id' => $doc->document_id,
							'project_id' => $doc->project_id,
							'user' => $this->session->userdata('user_fullname'),
							'user_id' => $this->session->userdata('user_id'),
							'user_email' => $this->session->userdata('user_email'),
							'jenis_log' => 4,
							'log_activity' => "update",
							'ket' => "Restore"
						);
						$this->db->insert('document_log', $log_data);
	
						$this->session->set_flashdata('success', '<span class="glyphicon glyphicon-ok"></span> Data berhasil dipulihkan');
						redirect($_SERVER['HTTP_REFERER']);
					} else {
						$this->session->set_flashdata('error', "Gagal memulihkan file dari tempat sampah");
						redirect($_SERVER['HTTP_REFERER']);
					}
				}
			} else {
				$this->session->set_flashdata('error', '<span class="glyphicon glyphicon-remove"></span> Terjadi Kesalahan');
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}
	
	
}
